
# Львівський Національний Університет Природокористування
## Кафедра Інформаційних систем та Технологій

### Звіт про виконання лабораторної роботи №1
### Тема: "Твірні шаблони проектування"

| Виконав: студент групи КН-31 Фіковський Михайло |  
| ------------------------------------------ |  
| Перевірив: Татомир Андрій                  |  

---

### Мета
Познайомитися з групою твірних шаблонів проектування та дослідити їхнє застосування на практиці.

---

### Хід роботи

1. Теоретичний опис твірної групи шаблонів.
2. Теоретичний опис вибраного шаблону.
3. Приклад коду, що реалізовує вибраний шаблон.
4. UML-діаграма для пояснення архітектури.

---

### Теоретичний опис твірних шаблонів проектування

Творча група шаблонів (Creational Patterns) фокусується на процесах створення об'єктів, надаючи механізми для створення об'єктів відповідно до певних вимог. Ці шаблони допомагають контролювати створення об'єктів, щоб уникнути зайвих залежностей та надмірної складності в коді. Основні шаблони в цій групі:

Singleton: Забезпечує, що клас має лише один екземпляр і надає глобальну точку доступу до нього.
Factory Method: Визначає інтерфейс для створення об'єкта, але дозволяє підкласам змінювати тип створюваного об'єкта.
Abstract Factory: Інтерфейс для створення сімейств пов'язаних або залежних об'єктів без специфікації їх конкретних класів.
Builder: Відокремлює конструкцію складного об'єкта від його представлення, щоб одна й та сама конструкція могла створювати різні представлення.
Prototype: Дозволяє копіювати існуючі об'єкти, не вказуючи їхні класи.

### Сінгелтон метод

Шаблон Singleton — це патерн, який забезпечує, що клас має тільки один екземпляр і надає глобальну точку доступу до нього. Цей шаблон корисний у ситуаціях, коли вам потрібно обмежити кількість екземплярів класу до одного, наприклад, для доступу до конфігураційних налаштувань або системних ресурсів.

####  Основні характеристики:
- Глобальний доступ: Singleton надає глобальну точку доступу до свого екземпляра.
- Контроль над створенням: У класі-одиночці контролюється створення нового екземпляра, що дозволяє запобігти створенню нових об'єктів.
- lazy loading: Екземпляр класу створюється лише при першому запиті.

#### Як реалізувати шаблон Сінглтон:
Приватний конструктор: Зробіть конструктор класу приватним, щоб уникнути створення об'єктів ззовні.
Статичний метод: Створіть статичний метод, який повертає єдиний екземпляр класу. Якщо екземпляр ще не створений, він буде створений у цьому методі.
Статична змінна: Збережіть єдиний екземпляр у статичній змінній класу.

#### Переваги:
- Позбавляє клас від прив’язки до конкретних класів продуктів.
- Виділяє код виробництва продуктів в одне місце, спрощуючи підтримку коду.
- Спрощує додавання нових продуктів до програми.
- Реалізує принцип відкритості/закритості.

```mermaid
classDiagram
    class Singleton {
        +some_business_logic(): str
    }


```

---

### Висновок

Шаблон Singleton є корисним, коли потрібно контролювати доступ до певного ресурсу або забезпечити єдиний точковий доступ до певної логіки. Його реалізація проста та ефективна, однак потрібно бути обережним, щоб не зловживати цим патерном, оскільки надмірне використання може призвести до проблем із тестуванням і масштабуванням.


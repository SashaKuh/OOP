
## Львівський Національний Університет Природокористування  
## Кафедра Інформаційних систем та Технологій

### Звіт про виконання лабораторної роботи №2
# "Структурні патерни проектування"

| Виконав: студент групи КН-31 Фіковський Михайло|  
|--------------------------------------------|  
| Перевірив: Татомир Андрій                  |

Мета: Познайомитися з групою структурних патернів.

### Хід роботи

1. Дати теоретичний опис структурних патернів.
2. Дати теоретичний опис вибраного патерну.
3. Навести приклад коду, який реалізовує даний патерн.
4. Скласти його UML-діаграму.

### Теоретичний опис структурної групи шаблонів

Структурні патерни проектування фокусуються на способах організації класів і об'єктів для формування складних структур, що складаються з багатьох частин. Вони допомагають розробникам створювати гнучкі та ефективні програми, визначаючи, як класи і об'єкти можуть взаємодіяти між собою.

Основні структурні патерни включають:

Адаптер (Adapter): Дозволяє об'єктам з несумісними інтерфейсами працювати разом.
Декоратор (Decorator): Додає нову поведінку до об'єктів, не змінюючи їхнього класу.
Фасад (Facade): Спрощує інтерфейс для складної підсистеми.
Композит (Composite): Дозволяє об'єктам формувати ієрархії, де окремі об'єкти і складені об'єкти можуть бути оброблені однаково.

### Патерн "Декоратор"

Декоратор — це структурний патерн проектування, який дозволяє динамічно додавати нову поведінку до об'єктів, не змінюючи їхнього класу. Цей патерн корисний, коли вам потрібно розширити функціональність класу, але не хочете створювати численні підкласи для кожної варіації.

####  Застосування:
Коли потрібно додати поведінку до об'єкта без зміни його класу.
Коли поведінка об'єкта може бути змінена в різний час під час виконання програми.
Коли потрібно уникнути величезної кількості підкласів.

#### Основні компоненти фасаду:
Компонент (Component): Загальний інтерфейс для всіх об'єктів, які можуть бути декоровані.
Конкретний компонент (ConcreteComponent): Клас, який реалізує компонент і може бути декорований.
Декоратор (Decorator): Абстрактний клас, що реалізує компонент і містить посилання на об'єкт компонента.
Конкретний декоратор (ConcreteDecorator): Реалізації декоратора, які додають нову поведінку.

#### Кроки реалізації:
Створіть інтерфейс компонента, який описує методи для об'єктів.
Реалізуйте конкретний клас компонента.
Створіть абстрактний клас декоратора, який імплементує компонент.
Додайте конкретні декоратори, що розширюють функціональність компонентів.

#### UML-diagram класу
```mermaid
classDiagram
    class Component {
        +cost(): float
    }

    class ConcreteComponent {
        +cost(): float
    }

    class Decorator {
        -component: Component
        +cost(): float
    }

    class MilkDecorator {
        +cost(): float
    }

    class SugarDecorator {
        +cost(): float
    }

    Component <|-- ConcreteComponent
    Component <|-- Decorator
    Decorator <|-- MilkDecorator
    Decorator <|-- SugarDecorator


```
---

### Висновок
У ході виконання лабораторної роботи №2 на тему "Структурні патерни проектування" я ознайомився з основами структурних патернів, їхньою метою та застосуванням у програмуванні. Особливу увагу було приділено патерну "Декоратор", який дозволяє динамічно додавати нову поведінку до об'єктів.

Я вивчив основні компоненти патерну "Декоратор", такі як компонент, конкретний компонент, декоратор та конкретні декоратори. Це допомогло зрозуміти, як можна використовувати цей патерн для розширення функціональності об'єктів без зміни їхніх класів.

Також я реалізував приклад коду, що демонструє роботу патерну, та створив UML-діаграму, яка ілюструє архітектуру взаємодії між компонентами.

# Львівський Національний Університет Природокористування
## Кафедра Інформаційних систем та Технологій

### Звіт про виконання лабораторної роботи №3
### Тема: "Поведінкові патерни проектування"

| Виконав: студент групи КН-31 Фіковський Михайло |  
| ------------------------------------------ |  
| Перевірив: Татомир Андрій                  |  

---

### Мета
Познайомитися з групою поведінкових патернів та дослідити їхнє застосування на практиці.

---

### Хід роботи

1. Теоретичний опис поведінкових патернів.
2. Теоретичний опис вибраного патерну.
3. Приклад коду, що реалізовує вибраний патерн.
4. UML-діаграма для пояснення архітектури.

---

### Теоретичний опис поведінкової групи шаблонів

Поведінкові патерни проектування зосереджуються на способах взаємодії між об'єктами і визначають, як об'єкти спілкуються один з одним. Вони допомагають визначити, як розподіляти відповідальність між об'єктами, спрощують код і полегшують зміни в майбутньому.

Основні поведінкові патерни включають:

Спостерігач (Observer): Дозволяє об'єктам спостерігати за змінами в інших об'єктах.
Стратегія (Strategy): Дозволяє вибирати алгоритм під час виконання програми.
Команда (Command): Інкапсулює запит як об'єкт, дозволяючи параметризувати клієнтів з різними запитами.
Ітератор (Iterator): Дозволяє послідовно обходити елементи колекції без розкриття її внутрішньої структури

---


### Спостерігач: 

Спостерігач — це поведінковий патерн проектування, який визначає залежність "один-до-багатьох" між об'єктами, так що коли один об'єкт змінює свій стан, всі залежні об'єкти сповіщаються і оновлюються автоматично.

#### Застосування:

Коли вам потрібно, щоб кілька об'єктів реагували на зміни в іншому об'єкті.
Коли зміни в одному об'єкті мають вплив на інші об'єкти, але ви не знаєте, скільки об'єктів спостерігають за ним.
Коли ви хочете реалізувати механізм подій.

#### Переваги:

Знижує зв'язність між класами, оскільки спостерігачі та спостережувані об'єкти можуть змінюватися незалежно один від одного.
Легко додавати нові спостерігачі, не змінюючи клас спостережуваного об'єкта.

#### Недоліки:

Може бути важко відстежувати, які спостерігачі були зареєстровані для спостереження за конкретним об'єктом.
Якщо спостерігачі не очищаються, може виникнути витік пам'яті.


####  UML-діаграма

```mermaid
classDiagram
    class Subject {
        +attach(observer: Observer)
        +detach(observer: Observer)
        +notify()
    }

    class Observer {
        +update()
    }

    class ConcreteSubject {
        +state: int
        +get_state(): int
    }

    class ConcreteObserver {
        +update()
    }

    Subject <|-- ConcreteSubject
    Observer <|-- ConcreteObserver
    ConcreteSubject --> Observer : notify()


```

---

### Висновок

В ході виконання лабораторної роботи №3 на тему "Поведінкові патерни проектування" я детально ознайомився з патерном "Спостерігач" і його практичними перевагами у програмуванні. Цей патерн надає можливість об'єктам динамічно реагувати на зміни стану інших об'єктів, що забезпечує гнучкість і легкість в управлінні зв'язками між компонентами системи.

Я вивчив ключові елементи патерну, такі як спостережувані об'єкти та їхні спостерігачі, що дозволило мені зрозуміти, як реалізувати механізм подій. В процесі реалізації коду, який демонструє функціональність патерну, я отримав практичний досвід у застосуванні цього підходу.
---


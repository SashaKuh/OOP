
# Львівський Національний Університет Природокористування
## Кафедра Інформаційних систем та Технологій

### Звіт про виконання лабораторної роботи №3
### Тема: "Поведінкові патерни проектування"

| Виконав: студент групи КН-31 Вітка Тарас |  
| ------------------------------------------ |  
| Перевірив: Татомир Андрій                  |  

---

### Мета
Познайомитися з групою поведінкових патернів та дослідити їхнє застосування на практиці.

---

### Хід роботи

1. Теоретичний опис поведінкових патернів.
2. Теоретичний опис вибраного патерну.
3. Приклад коду, що реалізовує вибраний патерн.
4. UML-діаграма для пояснення архітектури.

---

### Теоретичний опис поведінкової групи шаблонів

Поведінкові патерни проектування зосереджуються на способах взаємодії між об'єктами і визначають, як об'єкти спілкуються один з одним. Вони допомагають визначити, як розподіляти відповідальність між об'єктами, спрощують код і полегшують зміни в майбутньому.

Основні поведінкові патерни включають:
- Спостерігач (Observer): Дозволяє об'єктам спостерігати за змінами в інших об'єктах.
- Стратегія (Strategy): Дозволяє вибирати алгоритм під час виконання програми.
- Команда (Command): Інкапсулює запит як об'єкт, дозволяючи параметризувати клієнтів з різними запитами.
- Ітератор (Iterator): Дозволяє послідовно обходити елементи колекції без розкриття її внутрішньої структури.

---


### Стратегія: 

Стратегія — це поведінковий патерн проектування, який визначає сімейство схожих алгоритмів і розміщує кожен з них у власному класі. Після цього алгоритми можна заміняти один на інший прямо під час виконання програми.

#### Застосування:

- Якщо вам потрібно використовувати різні варіації якого-небудь алгоритму всередині одного об’єкта.
- Якщо у вас є безліч схожих класів, які відрізняються лише деякою поведінкою.
- Якщо ви не хочете оголювати деталі реалізації алгоритмів для інших класів.
- Якщо різні варіації алгоритмів реалізовано у вигляді розлогого умовного оператора. Кожна гілка такого оператора є варіацією алгоритму.

#### Переваги:

- Гаряча заміна алгоритмів на льоту.
- Ізолює код і дані алгоритмів від інших класів.
- Реалізує принцип відкритості/закритості.

#### Недоліки:

- Ускладнює програму внаслідок додаткових класів.
- Клієнт повинен знати, в чому полягає різниця між стратегіями, щоб вибрати потрібну.


####  UML-діаграма

```mermaid
classDiagram
    class Context {
        -strategy: Strategy
        +set_strategy(strategy: Strategy)
        +execute_strategy(data)
    }

    class Strategy {
        +execute(data)
    }

    class ConcreteStrategyA {
        +execute(data)
    }

    class ConcreteStrategyB {
        +execute(data)
    }

    Context --> Strategy
    Strategy <|-- ConcreteStrategyA
    Strategy <|-- ConcreteStrategyB

```

---

### Висновок

У ході виконання лабораторної роботи №4 на тему "Поведінкові патерни проектування" я ознайомився з патерном "Стратегія" та його застосуванням у програмуванні. Патерн дозволяє реалізувати різні алгоритми без зміни коду клієнта, що забезпечує гнучкість і розширюваність системи.

Я вивчив основні компоненти патерну, такі як контекст, стратегія та конкретні стратегії. Це допомогло зрозуміти, як можна використовувати патерн для вибору алгоритму виконання на етапі виконання програми.

Також я реалізував приклад коду, що демонструє роботу патерну, та створив UML-діаграму, яка ілюструє архітектуру взаємодії між компонентами.

---


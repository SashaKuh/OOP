
## Львівський Національний Університет Природокористування  
## Кафедра Інформаційних систем та Технологій

### Звіт про виконання лабораторної роботи №2
# "Структурні патерни проектування"

| Виконав: студент групи КН-31 Пирч Олександр|  
|--------------------------------------------|  
| Перевірив: Татомир Андрій                  |

Мета: Познайомитися з групою структурних патернів.

### Хід роботи

1. Дати теоретичний опис структурних патернів.
2. Дати теоретичний опис вибраного патерну.
3. Навести приклад коду, який реалізовує даний патерн.
4. Скласти його UML-діаграму.

### Теоретичний опис структурної групи шаблонів

Структурні шаблони (англ. structural patterns) — шаблони проєктування, у яких розглядається питання про те, як із класів та об'єктів утворюються більші за розмірами структури.

Структурні шаблони рівня класу використовують успадкування для утворення композицій із інтерфейсів та реалізацій.

Структурні шаблони рівня об'єкта компонують об'єкти для отримання нової функціональності. Додаткова гнучкість у цьому разі пов'язана з можливістю змінювати композицію об'єктів під час виконання, що є неприпустимим для статичної композиції класів.

Основні структурні патерни включають:

- Адаптер (Adapter)
- Декоратор (Decorator)
- Фасад (Facade)
- Композит (Composite)

### Патерн "Фасад"

Шаблон Фасад надає спрощений інтерфейс для складної системи або підсистеми, приховуючи її складність від користувача. Він дозволяє взаємодіяти з кількома класами через один єдиний об'єкт, що зменшує кількість залежностей і полегшує підтримку коду.

####  Застосування:
- Коли система має складну структуру, і необхідно спростити її використання.
- Коли потрібно зменшити кількість зв'язків між клієнтами та класами підсистеми.
- Для організації взаємодії з різними підсистемами через єдиний інтерфейс.

#### Основні характеристики:
Спрощує використання складної системи, надаючи простий інтерфейс.
Зменшує кількість залежностей між підсистемами.
Покращує читабельність та розширюваність коду.
Може бути впроваджений на різних рівнях системи (для компонентів, модулів тощо).

#### Приклад реалізації:
Припустимо, у нас є система для замовлення поїздки з авіаквитком, готелем і таксі. Клієнт взаємодіє з кожним із цих сервісів через окремі класи, але з використанням фасаду ми можемо спростити цей процес.

#### UML-diagram класу
```mermaid
classDiagram
    class TravelFacade {
        +book_trip(): str
    }

    class FlightBooking {
        +book_flight(): str
    }

    class HotelBooking {
        +book_hotel(): str
    }

    class TaxiBooking {
        +book_taxi(): str
    }

    TravelFacade --> FlightBooking
    TravelFacade --> HotelBooking
    TravelFacade --> TaxiBooking


```
---

### Висновок
У ході виконання лабораторної роботи №2 на тему "Структурні патерни проектування" я ознайомився з основними структурними патернами, їхньою метою та застосуванням. Особливу увагу було приділено патерну "Фасад", який дозволяє спростити взаємодію зі складною системою через єдиний інтерфейс. Я вивчив, як можна використовувати цей патерн для зменшення залежностей між компонентами системи і спрощення її структури. Також реалізував приклад коду, що демонструє роботу патерну, та створив UML-діаграму, яка ілюструє архітектуру взаємодії між компонентами.